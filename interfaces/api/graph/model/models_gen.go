// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type Connection interface {
	IsConnection()
}

type Edge interface {
	IsEdge()
}

type Node interface {
	IsNode()
}

type Audio struct {
	ID          string    `json:"id"`
	Name        string    `json:"name"`
	Length      int       `json:"length"`
	LikeCount   int       `json:"likeCount"`
	PlayCount   int       `json:"playCount"`
	URL         string    `json:"url"`
	Minetype    string    `json:"minetype"`
	PublishedAt time.Time `json:"publishedAt"`
	CreatedAt   time.Time `json:"createdAt"`
	UpdatedAt   time.Time `json:"updatedAt"`
}

func (Audio) IsNode() {}

type AudioConnection struct {
	PageInfo *PageInfo    `json:"pageInfo"`
	Edges    []*AudioEdge `json:"edges"`
}

func (AudioConnection) IsConnection() {}

type AudioEdge struct {
	Cursor string `json:"cursor"`
	Node   *Audio `json:"node"`
}

func (AudioEdge) IsEdge() {}

type AudioOrder struct {
	Field     *AudioOrderField `json:"field"`
	Direction *SortDirection   `json:"direction"`
}

type AudioOrdering struct {
	Sort      AudioSort     `json:"sort"`
	Direction SortDirection `json:"direction"`
}

type AudiosInput struct {
	Listened *bool `json:"listened"`
}

type BackwardPagination struct {
	Last   int     `json:"last"`
	Before *string `json:"before"`
}

type ForwardPagination struct {
	First int     `json:"first"`
	After *string `json:"after"`
}

type PageCondition struct {
	Backward *BackwardPagination `json:"backward"`
	Forward  *ForwardPagination  `json:"forward"`
}

type PageInfo struct {
	Cursor          string  `json:"cursor"`
	TotalPage       int     `json:"totalPage"`
	HasMore         bool    `json:"hasMore"`
	HasNextPage     bool    `json:"hasNextPage"`
	HasPreviousPage bool    `json:"hasPreviousPage"`
	StartCursor     *string `json:"startCursor"`
	EndCursor       *string `json:"endCursor"`
}

type AudioOrderField string

const (
	AudioOrderFieldID        AudioOrderField = "ID"
	AudioOrderFieldName      AudioOrderField = "NAME"
	AudioOrderFieldCreatedAt AudioOrderField = "CREATED_AT"
	AudioOrderFieldUpdatedAt AudioOrderField = "UPDATED_AT"
)

var AllAudioOrderField = []AudioOrderField{
	AudioOrderFieldID,
	AudioOrderFieldName,
	AudioOrderFieldCreatedAt,
	AudioOrderFieldUpdatedAt,
}

func (e AudioOrderField) IsValid() bool {
	switch e {
	case AudioOrderFieldID, AudioOrderFieldName, AudioOrderFieldCreatedAt, AudioOrderFieldUpdatedAt:
		return true
	}
	return false
}

func (e AudioOrderField) String() string {
	return string(e)
}

func (e *AudioOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AudioOrderField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AudioOrderField", str)
	}
	return nil
}

func (e AudioOrderField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type AudioSort string

const (
	AudioSortID   AudioSort = "ID"
	AudioSortName AudioSort = "NAME"
)

var AllAudioSort = []AudioSort{
	AudioSortID,
	AudioSortName,
}

func (e AudioSort) IsValid() bool {
	switch e {
	case AudioSortID, AudioSortName:
		return true
	}
	return false
}

func (e AudioSort) String() string {
	return string(e)
}

func (e *AudioSort) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AudioSort(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AudioSort", str)
	}
	return nil
}

func (e AudioSort) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Category string

const (
	CategoryJijineta Category = "JIJINETA"
	CategoryTool     Category = "TOOL"
)

var AllCategory = []Category{
	CategoryJijineta,
	CategoryTool,
}

func (e Category) IsValid() bool {
	switch e {
	case CategoryJijineta, CategoryTool:
		return true
	}
	return false
}

func (e Category) String() string {
	return string(e)
}

func (e *Category) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Category(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Category", str)
	}
	return nil
}

func (e Category) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SortDirection string

const (
	SortDirectionAsc  SortDirection = "ASC"
	SortDirectionDesc SortDirection = "DESC"
)

var AllSortDirection = []SortDirection{
	SortDirectionAsc,
	SortDirectionDesc,
}

func (e SortDirection) IsValid() bool {
	switch e {
	case SortDirectionAsc, SortDirectionDesc:
		return true
	}
	return false
}

func (e SortDirection) String() string {
	return string(e)
}

func (e *SortDirection) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SortDirection(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SortDirection", str)
	}
	return nil
}

func (e SortDirection) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
