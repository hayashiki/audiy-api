// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package entity

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type Connection interface {
	IsConnection()
}

type Edge interface {
	IsEdge()
}

type Node interface {
	IsNode()
}

type AudioConnection struct {
	PageInfo *PageInfo    `json:"pageInfo"`
	Edges    []*AudioEdge `json:"edges"`
}

func (AudioConnection) IsConnection() {}

type AudioEdge struct {
	Cursor string `json:"cursor"`
	Node   *Audio `json:"node"`
}

func (AudioEdge) IsEdge() {}

type AudioOrder struct {
	Field     *AudioOrderField `json:"field"`
	Direction *SortDirection   `json:"direction"`
}

type AudiosInput struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

type Comment struct {
	ID        string    `json:"id"`
	User      *User     `json:"user"`
	Body      string    `json:"body"`
	CreatedAt time.Time `json:"createdAt"`
	UpdatedAt time.Time `json:"updatedAt"`
}

func (Comment) IsNode() {}

type PageInfo struct {
	Cursor    string `json:"cursor"`
	TotalPage int    `json:"totalPage"`
	HasMore   bool   `json:"hasMore"`
}

type QuerySpec struct {
	Order  []*AudioOrder `json:"order"`
	Cursor string        `json:"cursor"`
	Limit  *int          `json:"limit"`
}

type ToggleLikeResult struct {
	Like    *Like  `json:"like"`
	Action  string `json:"action"`
	Success bool   `json:"success"`
}

type ToggleStarResult struct {
	Star    *Star  `json:"star"`
	Action  string `json:"action"`
	Success bool   `json:"success"`
}

type UpdateAudioInput struct {
	AudioID string `json:"audioID"`
}

type Version struct {
	Hash    string `json:"hash"`
	Version string `json:"version"`
}

type AudioOrderField string

const (
	AudioOrderFieldID          AudioOrderField = "ID"
	AudioOrderFieldName        AudioOrderField = "NAME"
	AudioOrderFieldPublishedAt AudioOrderField = "PUBLISHED_AT"
	AudioOrderFieldCreatedAt   AudioOrderField = "CREATED_AT"
	AudioOrderFieldUpdatedAt   AudioOrderField = "UPDATED_AT"
)

var AllAudioOrderField = []AudioOrderField{
	AudioOrderFieldID,
	AudioOrderFieldName,
	AudioOrderFieldPublishedAt,
	AudioOrderFieldCreatedAt,
	AudioOrderFieldUpdatedAt,
}

func (e AudioOrderField) IsValid() bool {
	switch e {
	case AudioOrderFieldID, AudioOrderFieldName, AudioOrderFieldPublishedAt, AudioOrderFieldCreatedAt, AudioOrderFieldUpdatedAt:
		return true
	}
	return false
}

func (e AudioOrderField) String() string {
	return string(e)
}

func (e *AudioOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AudioOrderField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AudioOrderField", str)
	}
	return nil
}

func (e AudioOrderField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SortDirection string

const (
	SortDirectionAsc  SortDirection = "ASC"
	SortDirectionDesc SortDirection = "DESC"
)

var AllSortDirection = []SortDirection{
	SortDirectionAsc,
	SortDirectionDesc,
}

func (e SortDirection) IsValid() bool {
	switch e {
	case SortDirectionAsc, SortDirectionDesc:
		return true
	}
	return false
}

func (e SortDirection) String() string {
	return string(e)
}

func (e *SortDirection) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SortDirection(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SortDirection", str)
	}
	return nil
}

func (e SortDirection) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
