type Audio implements Node {
    id: ID!
    name: String!
    length: Float!
    likeCount: Int!
    playCount: Int!
    commentCount: Int!
    url: String!
    mimetype: String!
    publishedAt: Time!
    createdAt: Time!
    updatedAt: Time!
    transcribed: Boolean!
}

type AudioEdge implements Edge {
    cursor: Cursor!
    node: Audio!
}

type AudioConnection implements Connection {
    pageInfo: PageInfo!
    edges: [AudioEdge]!
}

input AudiosInput {
    id: ID!
    name: String!
}

enum AudioOrder {
    PUBLISHED_AT_ASC
    PUBLISHED_AT_DESC
}

enum State {
    PLAYED
    UNPLAYED
}

input AudioFilter {
    played: Boolean
    stared: Boolean
    liked: Boolean
}

extend type Query {
    audio(id: ID!): Audio
    audios(
        cursor: Cursor
        filter: AudioFilter
        limit: Int = 10
        order: AudioOrder = PUBLISHED_AT_DESC
    ): AudioConnection!
}

input UploadAudioInput {
#    id: ID!
#    name: String!
#    url: String!
#    mimetype: String!
#    publishedAt: Time!
    description: String
    file: Upload!
}

input UploadAudioFileInput {
    file: Upload!
}

extend type Mutation {
    createAudio(input: CreateAudioInput): Audio!
    uploadAudio(input: UploadAudioInput): Audio!
}

scalar Upload

type File {
    id: String!
    name: String!
    url: String!
}

input UploadFileInput {
    id: Int!
    file: Upload!
}

input CreateAudioInput {
#    必須入力からはずしたい
    id: ID!
    name: String!
    url: String!
    mimetype: String!
    length: Float!
}
